---------------------------------------------------------------------------------
针对ie浏览器的加载
<!--[if lt IE 9]>
    <script src="js/html5.js"></script>
    <script src="js/respond.min.js"></script>
<![endif]-->
---------------------------------------------------------------------------------
只对部分安卓有效
微信的内置浏览器，分享页面地址到系统内置浏览器时，只会记住网站入口页面，js框架的路由的子页面是不会被记住的，比如#/alipaying。解决办法是用window.location.href = window.location.origin + '/#/alipaying?returnUrl=' + res.data.data;进行一次页面跳转操作，这样可以更新入口页面。
window.history.pushState({},null,url)方法也对ios不起作用
目前的解决办法只有跳到子页面，更新页面入口。
---------------------------------------------------------------------------------
微信内置浏览器清除缓存
针对安卓有效
打开一个聊天窗口，输入debugx5.qq.com 并发送，然后点击，拖到最下面选择清除缓存。 
---------------------------------------------------------------------------------
seo搜索引擎，通过url抓取html代码,一般不走js。
cshtml,jsp,aspx都是后台动态页面文件 前后端一体，不利维护。但是不走前台js，直接后台动态生成好html页面，利于seo。
html+js 前后端分离，但是不能组件化复用、数据绑定。不利于seo优化。
mvvm框架 完全可以实现后台动态页面的功能，如组件化复用、数据绑定。但是不利于seo优化。
最好方案：
mvvm+node服务器直出
通过node实现：后台=》node渲染好页面=》url=>前端，提前渲染好html。
---------------------------------------------------------------------------------
玩友时代收获
linux指令 操作git和cmd
electron框架做跨平台pc应用
用node socket通讯协议
用node 内嵌式数据库sqlite3
es6语法 let 箭头函数 promise异步
h5 ajax以文件流的方式传输form信息 formData
---------------------------------------------------------------------------------
生产环境，项目怎么避免跨域的
1.后台设置nginx反向代理，用户访问nginx，由nginx连接前端文件和后台文件，调在nginx设置的域名下完成访问。
2.后台设置cors访问白名单，放自己的域名，只自己的域名能够访问

前端拿着唯一的token去找后台，后台才知道我什么身份，而且不易被冒充身份，安全，不容易被攻击
一般方式有前端在header加入token，或后台set入cookie两种
后台set入cookie两种在多域名接口不适用，因为不同域cookie不共用（但是可通过nginx实现跨域）。header加入token可不存在这个问题

屏幕取色工具colorpix

windows上常用的量尺寸软件 pxcook

animate.css 常用的css库

chrome解决浏览器跨域问题
老方法：
1.加 --args --disable-web-security
关闭chrome，在快捷方式里属性里加 --args --disable-web-security
48版本后失效
新方法：
2.装Allow-Control-Allow-Origin.crx插件
打开即可跨域

解决后台接口限制跨域访问问题
配中间层

配nginx反向代理
http{
    server{
        listen  80;#本地域名端口
        server_name  localhost;#本地域名

        location / {
            proxy_pass http://localhost:8080; #前端页面地址
            proxy_redirect default;
        }

        location /apis { #添加访问目录为/apis的代理配置
			rewrite  ^/apis/(.*)$ /$1 break;# 监听所有/apis前缀，实则转发后台api接口地址
			proxy_pass   http://a.cloud.cn/api/; #后台接口地址
        }        
    }
}
解释：
location 为本地域名如：localhost:8080
location /apis就重写为localhost:8080/apis/xxx 实则转发http://a.cloud.cn/api/xxx的接口地址

vue-cli 自带的node中间层转发 实际似乎也是http-proxy-middleware这个包
config/index.js里
module.exports = {
    dev:{
        proxyTable: {
            '/api': {                            
                target: 'http://a.cloud.cn',//接口地址                
                changeOrigin: true,
                secure: false,
                pathRewrite: {
                    '^/api': ''//将接口地址重写为api
                }
            }
        },
    }
}
axios.defaults.baseURL = '/api';
//axios.defaults.baseURL = process.env.API_ROOT+'';

webpack自己起 装http-proxy-middleware这个包
import proxy from 'http-proxy-middleware';
module.exports = {
    devServer: {
		contentBase: path.resolve(__dirname, "dist"),
		host: "localhost",  // win8 下自启浏览器可能是因为没设置为localhost
		port: "8091",
		open: true, // 开启浏览器
		hot: true,  // 开启热更新
        disableHostCheck: true,
        proxy: {
            '/apis': {
                target: 'http://a.cloud.cn/api/',//接口地址    
                changeOrigin: true,
                pathRewrite: {
                    '^/apis': ''//将接口地址重写为api
                }
            }
        }
	}
}