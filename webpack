
---------------------------------------------------------
vue-cli项目的config/index.js/assetsPublicPath => './'改成当前路径，而不是根路径
vue-cli生成webpack模板
cnpm run build项目打包生成dist文件夹，其中有static文件夹和index.html，将它们放至服务器。
需要在原项目的config配置文件夹的index.js设置build命令的assetsPublicPath资源公共路径属性，把'/'改成'./'。把服务器根路径改成当前文件同级路径。
这样在服务器上就能正常运行dist文件夹里的index.html文件了 。
---------------------------------------------------------
DllPlugin
把不需要重复编译的第三方库等文件，仅开始时编译一次，后续编译只编译业务代码，大幅提高编译速度。

.dll文件，动态链接库
动态链接库包含的是，可以在其他模块中进行调用的函数和数据
提供了将应用模块化的方式，应用的功能可以在此基础上更容易被复用。

四个核心概念：
入口(entry)
输出(output)
loader
插件(plugins)

output.filename:webpack bundle 的名称
output.path:bundle 生成(emit)到哪里

path模块 是一个 Node.js 核心模块，用于操作文件路径

package.json文件里：
"scripts"编写指令的地方
"dev": "webpack-dev-server --open"//启用 open 后，dev server 会打开浏览器
如果没有提供浏览器（如上所示），则将使用您的默认浏览器。要指定不同的浏览器，只需传递其名称
webpack-dev-server --open 'Google Chrome'

webpack - 建设发展
webpack -p - 建筑用于生产（缩小）
webpack --watch - 用于持续增量建筑
webpack -d - 包括源地图
webpack --colors - 使建筑产量漂亮

webpack.config.js webpack配置文件

entry入口
output输出口

多个入口
entry:{
    bundle1:'./main1.js',
    bundle2:'./main2.js'
},
output:{
    filename:'[name].js'//bundle1.js bundle2.js 也会生成两个
}

引入模块
module:{
    relues:[//数组
        test://匹配规则 会匹配 resource,Rule.resource的缩写,
        exclude://排除项
        use:{
            loader:''//指定loader
            options:{
                presents:['es2015','react']//预设插件来转换es6和react
            }
        }
    ]
}

CSS-loader
允许将CSS包含在JS文件中，然后使用CSS-loader预处理CSS文件

在js中引入css文件 配webpack
import './subAccountManage.css';//直接用样式
或
import a from './subAccountManage.css';//html中用a.b

在style中引入css文件
@import './subAccountManage.css';//在前面加@

加了scoped的样式，只对当前页面生效。自己不会影响别人，但是别人写了全局能影响我们

写在外部css文件的再import引入的，会变成全局样式

在vue.config.js配devServer.proxy可实现跨域调接口

webpack编译报错时，会调用缓存版本

webpack起不起来，更新webpack-cli2.x到3.1.0

__dirname是node.js中的一个全局变量，它指向当前执行脚本所在的目录。

1. 对于以/开始的路径片段，path.join只是简单的将该路径片段进行拼接，而path.resolve将以/开始的路径片段作为根目录，在此之前的路径将会被丢弃，就像是在terminal中使用cd命令一样。

path.join('/a', '/b') // 'a/b'
path.resolve('/a', '/b') // '/b'
 

2. path.resolve总是返回一个以相对于当前的工作目录（working directory）的绝对路径。

path.join('./a', './b') // 'a/b'
path.resolve('./a', './b') // '/Users/username/Projects/webpack-demo/a/b'



path-nodejs的模块 用于处理文件与目录的路径
const path = require('path');
path: path.resolve(__dirname, 'dist'), 将路径或路径片段的序列处理成绝对路径
webpack文档
概念：
loader：
test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件
use 属性，表示进行转换时，应该使用哪个 loader。

在 webpack 配置中定义 loader 时，要定义在 module.rules 中

plugins
插件的范围包括：打包优化、资源管理和注入环境变量
想要使用一个插件 需要 require() 它，然后把它添加到 plugins 数组中
const HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过 npm 安装
plugins: [
    new HtmlWebpackPlugin({template: './src/index.html'})
  ]

模式 mode
module.exports = {
  mode: 'production'
};

 polyfill为了兼容
入口
entry
单个入口
entry: string|Array<string>
对象语法
module.exports = {
  entry: {
    app: './src/app.js',
    vendors: './src/vendors.js'
  }
};
分离 应用程序(app) 和 第三方库(vendor) 入口
webpack.config.js
多页面应用程序
module.exports = {
  entry: {
    pageOne: './src/pageOne/index.js',
    pageTwo: './src/pageTwo/index.js',
    pageThree: './src/pageThree/index.js'
  }
};
输出output
output: {
    filename: 'bundle.js',//文件名
    path: '/home/proj/public/assets'//path的绝对路径
  }
output: {
    filename: '[name].js',//[name]占位符，确保命名唯一
    path: __dirname + '/dist'
  }
mode模式
只设置 NODE_ENV 时，不会自动设置 mode
loader类似gulp中的task
使用 loader
配置（推荐）：在 webpack.config.js 文件中指定 loader。
内联：在每个 import 语句中显式指定 loader。
{
        test: /\.css$/,
        use: [
          { loader: 'style-loader' },
          {
            loader: 'css-loader',
            options: {
              modules: true
            }
          }
        ]
      }
内联 使用 ! 将资源中的 loader 分开。分开的每个部分都相对于当前目录解析
import Styles from 'style-loader!css-loader?modules!./styles.css';
编写loader
通过在 rule 对象设置 path.resolve 指向这个本地文件
{
        test: /\.js$/,
        use: [
          {
            loader: path.resolve('path/to/loader.js'),
            options: {/* ... */}
          }
        ]
      }
插件

webpack --config XXX.js //使用另一份配置文件（比如webpack.config2.js）来打包

webpack默认处理js，处理css，html...要loader

webpack --devtool source-map
在sources中生成webpack明细

webpack-dev-server --inline --hot//hot热替换

如果你使用 webpack 4+ 版本，你还需要安装 CLI。

path.join和path.resolve是两个函数
__dirname是当前执行目录，如：
F:\Shon\pra\test\webpack-pra\demo3

output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, './dist/a')
}
path.resolve(__dirname, './dist/a')
'./dist/a'不能以/开头，会以/为根目录，丢失当前目录
'./dist/a'或'dist/a'都行，意为在当前目录建dist文件夹，里面建a文件夹，里面生成bundle.js文件

通过配置文件执行构建 可以使用 --config 选项执行任何名称的配置文件
webpack --config webpack.config.js

windows 中通过调用路径去调用 webpack 时，必须使用反斜线()。例如 node_modules\.bin\webpack --config webpack.config.js

执行webpack 似乎默认执行webpack.config.js

在webpack或npm run build中传参 --xxx --xxx

如果你使用的是 npm 5，你可能还会在目录中看到一个 package-lock.json 文件

[name]为entry键名，如：'index'

执行 npx webpack，会将我们的脚本作为入口起点，然后 输出 为 main.js。Node 8.2+ 版本提供的 npx 命令，可以运行在初始安装的 webpack 包(package)的 webpack 二进制文件

运行webpack，如果没有webpack.config.js，会自动把代码src/index.js，作为入口文件。在index.html目录生成main.js作为出口文件。

webpack.config.js
这个文件是在 node.js 中运行的，因此不支持 ES6 的 import 语法
所以用require引入文件

webpack 当遇到 import ... 时，会调用loader对引用的文件进行编译
use: ['babel-loader', 'eslint-loader']
loader 的处理顺序是从最后一个到第一个，先eslint再babel

安装 babel
babel-core 顾名思义是 babel 的核心编译器
babel-preset-env 是一个配置文件
在 package.json 加入 babel 配置
"babel": {
    "presets": ["env"]
  }
webpack.config.js中
{
  test:/\.js$/,
  use:['babel-loader']
}
babel-loader 是 webpack 的插件
npm install babel-core babel-preset-env babel-loader -D

在webpack中加载css背景图片、img元素src引用图片、使用es6的import引入的图片
url-loader是file-loader的升级版
fallback 
Type: String Default: 'file-loader' 默认以file-loader处理

url-loader比file-loader多一个limit的功能，在limit一下的图片会被转为base64，减少http请求，更快的加载图片
大于limit的会自动调用file-loader，只要配置url-loader就行了，不用再配置file-loader，装依赖的时候要装url-loader和file-loader

走file-loader的，会生成图片到output

图片引用
在img src和css背景中用的图片路径，貌似都是相对路径，
绝对路径要比如f://xxx/xx/xx.png才行，貌似获取不到

设置了resolve:alias @别名后，
css背景中用的图片路径是不能用@的
img src里暂时不知道

vue-cli中
src/assets 会被webpack处理解析为模块依赖，只支持相对路径形式
static 并不会被Webpack处理：它们会直接被复制到最终的打包目录（默认是dist/static）下，需要绝对路径引用

推荐assets经过webpack处理的方式，压缩优化过

js中引图片需
import xxx from 'xxx'

publicPath静态资源公共路径，会在所有静态资源前加，
比如图片，在生成环境就需要变成'./'，不能是'/'，不能在服务器根路径。

把css从js分出去
可以让浏览器异步并行加载CSS
不用等待整个JS包加载完毕再来加载样式
ExtrackTextWebpackPlugin
webpack4之后不应用ExtrackTextWebpackPlugin分割css
用mini-css-extract-plugin替代，它本身去重

optimize-css-assets-webpack-plugin在生产环境使css压缩，去重，另外需要安装UglifyJsPlugin

生产环境js都要加上[hash去重]

设定了url-loader，安装了file-loader后
html中的图片必须要设定output.publicPath
output:{
  publicPath:devMode?'/':'./',
}
css中的图片必须要在
rules:{}
设定ExtrackTextWebpackPlugin.loader中
另外指定publicPath: '../'

url-loader中的file-loader中也能另外设置publicPath，
但是会把html和css中的publicPath都改变

webpack3中ExtractTextPlugin.extract中可以另外设置publicPath，
比如vue-cli中webpack3设置'../../'
只改变css中的publicPath

publicPath默认值貌似是 __webpack_public_path__

老写法：
data (){
 return {
  src: require('IMAGES/banner.jpg')
 }
}
<img :src="src">

webpack多页面
在entry里配置多个入口文件，彼此独立
这样在output也会生成多个js
页面似乎是对html-webpack-plugin循环输出多个new HtmlWebpackPlugin({xx:xxx})

vendor模块是指node_modules中的功用模块
manifest是指针对vendor模块所做的缓存

webpack.DllPlugin插件
一个 dll 包，就是一个很纯净的依赖库，它本身不能运行，是用来给你的 app 或者业务代码引用的。
把打包过程分成两步：
1.打包ddl包
2.引用ddl包，打包业务代码
动态链接库
生成manifest.json文件，用于DllReferencePlugin映射依赖项

happypack使webpack能多线程处理
npm i -D happypack