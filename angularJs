先注册service调接口
注入进directives组件中
组件中调注入的service方法
赋值在scope上，模板中可以直接调用

directives模板里的逻辑直接写在directives里
ng路由中-html中的逻辑写在对应的controller中

ng-app 指令定义一个 AngularJS 应用程序。

ng-model 指令把元素值（比如输入域的值）绑定到应用程序。

ng-bind 指令把应用程序数据绑定到 HTML 视图
ng-init 指令初始化 AngularJS 应用程序变量。
ng-bind={{ expression }}
AngularJS 模块（Module） 定义了 AngularJS 应用。

AngularJS 控制器（Controller） 用于控制 AngularJS 应用。

ng-app指令指明了应用, ng-controller 指明了控制器。
Module相当于一个容器
directive与hhtml元素绑定

service共有代码
controller私有代码
controller和view是mvvm，双向绑定$scope

ngjs调试工具：batarang

main.html - main.controller
main.html
    head.html
    body.html
    foot.html
main.controller中赋在$scope上的变量，main.html可用，里面的指令也可直接用
如：main.controller中$scope.a=123，body.html中{{a}}也能使用。

ng-class动态改变className

ng-show,ng-hide
ng-if

directive
    transclude: true //内嵌html
    link: function(scope, element, attr){
        // scope绑定作用域，element调用指令的元素，它的根元素上的所有属性集合
        // 修改dom
    }
    scope: true(继承来隔离，scope变不影响$scope)|false(默认，使用的$scope)|{}


对于scope: {}时
scope: {
    aa: '=',//传入变量
    bb: '@',//传入字符串，指令中<span bb='xxx'></span>//传给bb字符串'xxx'
    cc: '&'//传入回调函数，指令中<span ng-click='cc({id:1});'></span>
}
父页面：
<div aa='AA' cc='click(id)'></div>//可以时指令调用父页面的函数

上面3个都可以跟变量
如：
scope: {
    aa: '=',
    bb: '@xx',//把bb重命名为xx，在组件中就得这么用，<span xx='xxx'></span>
    cc: '&'
}

<li ui-sref='main（路由id）'></li>路由跳转

大概逻辑：
一个项目多个html，
一个html对应一个controller
一个页面由多个组件html组成
一个组件html对应一个directive

一个controller中通过$q和$http请求在$scope上绑定页面变量A
页面里的directive在scope中暴露接口a:'='
在页面上的该组件调用处对A变量解耦<div app-directive a='A' is-show='isShow'></div>
在组件html中即可使用解耦后的页面controller中的数据，如：
<div>
    <p ng-bind='a.name'></p>
    <p ng-bind='a.description'></p>
    <button ng-if='isShow'></button>
</div>

组件的事件绑定：
组件html中绑定click事件
<div>
    <button ng-click='clickEvent(param)'></button>
</div>
组件directive中，事件触发的方法写在link下，改变scope上的变量：
link:function(scope){
    scope.clickEvent = function(param){
        scope.xxx = xxx;
    }
}

scope对象常用属性：
scope.$id // scope对象唯一标识
scope.$parent // scope对象副作用域，如组件scope的$parent就是页面的$scope
scope.$root // 指向$root.scope，貌似是根scope？

scope对象常用方法：
scope.$watch() //监控scope某对象
scope.$on() //接收自定义事件
scope.$broadcast() //向下传自定义事件
scope.$emit() //向上传自定义事件
scope.$digest() //原生js方法操作dom时，双向绑定失效，手动同步视图时使用

服务service 和 服务工厂 factory
懒加载，公用函数
内置服务：
    $http, $q(promise), $timeout, $interval, $rootScope(scope对象祖先)

$rootScope用法：
相当于定义在祖先上的属性，继承下去
angular.module('app', ['ui.router', 'ngCookies', 'validation', 'ngAnimate']).run(['$rootScope', function($rootScope){
    $rootScope.xxx = xxx;
}]);    