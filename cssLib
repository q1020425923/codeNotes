--------------------------------------------------------------------
flex布局
/*flex布局*/
.flex{display: flex;display: -webkit-flex;}
/*水平轴是主轴 垂直轴是交叉轴*/
/*单根主轴方向*/
.fd-r{flex-direction: row;}
.fd-rr{flex-direction: row-reverse;}
.fd-c{flex-direction: column;}
.fd-cr{flex-direction: column-reverse;}
/*单根换行*/
.fw-n{flex-wrap: nowrap;}
.fw-w{flex-wrap: wrap;}
.fw-wr{flex-wrap: wrap-reverse;}
/*单根主轴对齐方式*/
.jc-fs{justify-content: flex-start;}
.jc-fe{justify-content: flex-end;}
.jc-c{justify-content: center;}
.jc-sb{justify-content: space-between;}
.jc-fs{justify-content: space-around;}
/*单根交叉轴对齐方式*/
.ai-fs{align-items: flex-start;}
.ai-fe{align-items: flex-end;}
.ai-c{align-items: center;}
.ai-b{align-items: baseline;}
.ai-s{align-items: stretch;}
/*多根交叉轴对齐方式*/
/*父层配合fd-r,fw-w。子层配合width:100%。使用*/ 
.ac-fs{align-content: flex-start;}
.ac-fe{align-content: flex-end;}
.ac-c{align-content: center;}
.ac-sb{align-content: space-between;}
.ac-sa{align-content: space-around;}
.ac-s{align-content: stretch;} 
/*item属性*/
/*项目放大比例 默认0*/
.fg-1{flex-grow:1;}
/*项目缩小比例 默认1*/
.fs-0{flex-shrink:0;}
/*优先 项目自动缩放*/
.f-a{flex: auto;}  
/*优先 项目不缩放*/
.f-n{flex: none;}

flex上下固高，中间自适应高度，纵向布局
wrap层 flex fd-c height:100%
.up{} 固高
.mid{} f-a overflow:auto;height:0
.down{} 固高
--------------------------------------------------------------------
子元素设height:100%是获取不到靠兄弟元素撑开的，未设具体高度的父级的高度的。
普通布局
block属性的div设height:auto是div自身高度
flex布局
flex属性的div设height:auto可以自动获取未设具体高度的父级高度（被兄弟子元素撑开的父级）。
--------------------------------------------------------------------
边框内阴影 inset
box-shadow: 0px 4px 14px #eaeaea inset;
--------------------------------------------------------------------
css权重
类，属性选择器和伪类选择器 权重相同都是10
class，属性选择器[type=text]，伪类选择器比如 :hover,:focus等
--------------------------------------------------------------------
黄金分割
0.618 约 w/h 5/3
--------------------------------------------------------------------
cursor光标
/*放大光标*/
.plus{cursor:zoom-in;}
/*缩小光标*/
.reduce{cursor:zoom-out;}
--------------------------------------------------------------------
禁止被选中
-webkit-user-select:none;
-moz-user-select:none;
-ms-user-select:none;
user-select:none; 
--------------------------------------------------------------------
//通过样式opacity和z-index来控制dom隐藏的另一种方式
$(instance.rArrow).css({'opacity':'0','z-index':'-1'});
避免和样式表里的display属性冲突
-------------------------------------------------------------------- 
图片绝对居中术
<div>
    <img src=''/>
</div>
div{position:relative;}
img{position:absolute;top:0;bottom:0;left:0;right:0;margin:auto;max-height:100%;max-width:100%;}
-------------------------------------------------------------------- 
三角形 向上
.triangle-up{ width: 0; height: 0;
border-width: 0 50px 100px 50px;//设置四边框厚度，左右50，下100    
border-color: black transparent;//四边框颜色，上下黑，左右没色
border-style: solid;//四边框样式}
-------------------------------------------------------------------- 
清除浮动 基于bt4
.clearfix::after{display: block;content: " ";clear: both;}
-------------------------------------------------------------------- 
现代浏览器直接支持css变量
比如
.a{--aaa:red;background:var(--aaa);}检测可行
-------------------------------------------------------------------- 
css3 背景渐变
线性渐变（初始上下）
background: linear-gradient(red, blue);
径向渐变
background: radial-gradient(red, green, blue);
添加角度
background: linear-gradient(90deg, red, blue);
透明度用rgba添加
-------------------------------------------------------------------- 
display:元素的框的类型
-------------------------------------------------------------------- 
background多图片,相隔
<div style="background:url(image/x.png)no-repeat 0% 0%,
url(image/x.png)no-repeat 10% 10%,
url(image/x.png)no-repeat 20% 20%,
url(image/x.png)no-repeat 30% 30%"></div>
-------------------------------------------------------------------- 
去除inline-block元素间距方法 父元素设置font-size: 0;

css的预处理器、后处理器
css的预处理器的框架：
    SASS、LESS和Stylus
    使用扩展语言，编程式书写css
    
CSS后处理器框架：
    还是编写css语法，但是对css进行增强处理
    css压缩工具（clean-css）,Autoprefixer(以Can I Use上的浏览器支持数据为基础，自动处理兼容问题)
    rework和postcss

给定位的元素水平垂直居中
一、margin:auto配合absolute四方位0撑开
二、利用transform相对于自身变形，left,top:50%,transform: translate(-50%,-50%);position即可

position:fixed弹窗，页面很矮时，弹窗可滚动
外层fixed层：
    1.不可用table布局flex也不行？
    2.加overflow: auto，因为overflow默认值是visible，不会被裁剪，没滚动条
内层absolute层：
    1.垂直线不能margin:auto,top:0.bottom:0，也不能top:50%,transform: translateY(-50%,-50%)方法垂直居中，这样会强制显示在页面中间，失去自身高度
    2.得top: 15%;margin-bottom: 50px;来设置上下留白，不能居中。
    
伪类添加边框
li{position:relative;}
li:after{content:'';height:2rpx;width:100rpx;background: #e6ecf0;position: absolute;bottom:0;right:0;}
最后一行伪类处理，去边框
li:last-child:after{height:0;}

文字两端对齐
pc:
    p{text-align: justify;text-align-last: justify;}
手机端:
    p{text-align: justify;}
    p:after{content: " ";display: inline-block;width: 100%;}

单边的边框出现与否是由：border-style决定的
如：border-bottom-style:solid 只要下边框

//div内上下等距做法
<div>//div{padding-bottom:20rpx;}
    <p></p>//p{margin-top:20rpx;}
    <p></p>
    <p></p>
</div>

css2.1盒模型中规定
嵌套盒元素（同级或者嵌套），没有非空内容、Padding或Border分隔时，margin共享
所以子元素的margin-top会作用于父元素上
解决办法父元素overflow:auto;//不为visiable即可

裁剪
clip:rect(0rpx 150rpx 150rpx 75rpx)
四个数字是距离上右下左的距离

360度 任意扇形
<div class='wrap'>        
    <div class="leftCir over">
        <div class="leftCirInner"></div>
    </div>
    <div class="rightCir over">
        <div class="rightCirInner"></div>
    </div>        
</div>

.wrap{width:160rpx;height:160rpx;margin: 10rpx;position: relative;}
.over{position: absolute;width:50%;height:100%;overflow: hidden;top:0;}
.leftCir{left:0;}
.rightCir{right:0;}
.leftCirInner,.rightCirInner{width:160rpx;height: 100%;position: absolute;top:0;border-radius:50%;background: red;}

0~180度：
.leftCirInner{left: 0;clip:rect(0 160rpx 160rpx 80rpx);transform: rotate(0deg);}
.rightCirInner{right: 0;clip:rect(0 80rpx 160rpx 0);transform: rotate(30deg);}
180~360度：
.leftCirInner{left: 0;clip:rect(0 160rpx 160rpx 80rpx);transform: rotate(30deg);}
.rightCirInner{right: 0;clip:rect(0 80rpx 160rpx 0);transform: rotate(180deg);}

360度 任意圆环
<div class='wrap'>        
    <div class="leftCir over">
        <div class="leftCirInner"></div>
    </div>
    <div class="rightCir over">
        <div class="rightCirInner"></div>
    </div>        
</div>

.wrap{width:160rpx;height:160rpx;margin: 10rpx;position: relative;}
.over{position: absolute;width:50%;height:100%;overflow: hidden;top:0;}
.leftCir{left:0;}
.rightCir{right:0;}
.leftCirInner,.rightCirInner{width:160rpx;height:100%;position: absolute;top:0;border-radius:50%;border:20rpx solid transparent;transform: rotate(-135deg);}

0~180度：（为了兼容iphone的双倍屏，rotate为奇数的情况，把0改为2rpx）
.leftCirInner{left: 2rpx;border-bottom:20rpx solid red;border-left:20rpx solid red;}
.rightCirInner{right: 2rpx;border-top:20rpx solid red;border-right:20rpx solid red;transform: rotate(-105deg);}
180度：
.leftCirInner{left: 2rpx;border-bottom:20rpx solid red;border-left:20rpx solid red;}
.rightCirInner{right: 2rpx;border-top:20rpx solid red;border-right:20rpx solid red;transform: rotate(45deg);}
180~360度：
.leftCirInner{left: 2rpx;border-bottom:20rpx solid red;border-left:20rpx solid red;transform: rotate(-105deg);}
.rightCirInner{right: 2rpx;border-top:20rpx solid red;border-right:20rpx solid red;transform: rotate(45deg);}
360度：
.leftCirInner{left: 2rpx;border-bottom:20rpx solid red;border-left:20rpx solid red;transform: rotate(45deg);}
.rightCirInner{right: 2rpx;border-top:20rpx solid red;border-right:20rpx solid red;transform: rotate(45deg);}

圆环显示进度效果
<div class='wrap'>        
    <div class="leftCir over">
        <div class="leftCirInner"></div>
    </div>
    <div class="rightCir over">
        <div class="rightCirInner"></div>
    </div>     
    <!--底层  -->
    <div class='floor'>12%</div>
</div>
.wrap{width:160rpx;height:160rpx;margin: 10rpx;position: relative;}
.over{position: absolute;z-index: 20;;width:50%;height:100%;overflow: hidden;top:0;}
.leftCir{left:0;}
.rightCir{right:0;}
.leftCirInner,.rightCirInner{width:160rpx;height:100%;position: absolute;top:0;border-radius:50%;border:20rpx solid transparent;transform: rotate(-135deg);}
.leftCirInner{left: 2rpx;border-bottom:20rpx solid #F56C6C;border-left:20rpx solid #F56C6C;}
.rightCirInner{right: 2rpx;border-top:20rpx solid #F56C6C;border-right:20rpx solid #F56C6C;transform: rotate(-105deg);}
.floor{position: absolute;width:100%;height:100%;z-index: 10;border-radius: 50%;border:20rpx solid #e0e0e0;text-align: center;line-height: 120rpx;}