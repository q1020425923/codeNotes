-------------------------------------------------------------------------------------------------
指令
创建文件
在'其它'文件夹下创建文件qqq
$ echo '其他'>qqq
-------------------------------------------------------------------------------------------------
git的不同种类
指令版
cmd中不能运行git命令，除非安装配置时选择第二个
git cmd可以运行git命令
git bash在cmd中加入了几个实用的linux命令以及git自己的命令
gui界面版
git gui,git extensions,TortoiseGit,Sourcetree
git gui获取SSH pub KEY
git gui-help-show ssh key添加到github里的settings-ssh and gpg keys里
-------------------------------------------------------------------------------------------------
git概念原理
CVS、Subversion、Perforce、Bazaar 等等，将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异
git把数据看作是对小型文件系统的一组快照
git三种状态
已修改（modified），commit本地已暂存（staged），push到远端 已提交（committed）
定制你的 Git 环境。 每台计算机上只需要配置一次
安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。
这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改：
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
Freenode IRC 服务器（ irc.freenode.net ）的 #git 或 #github 频道
linux国外技术聊天室

git版本快速切换靠的是git快照机制
参考：如何理解git的快照？ https://www.zhihu.com/question/27680108
http://hanfu.space/%E6%8A%80%E6%9C%AF/2015/08/26/git-tutorial/
-------------------------------------------------------------------------------------------------
github界面
github仓库里的new pull request按钮是，别人fork了你的仓库，对你提了一些修改，希望你能拉取合并的。
-------------------------------------------------------------------------------------------------
git拉取规则
针对项目一期，二期修改的
改一期，本地pc-qxn拉远端master，推远端pc-qxn，推远端master，登本地dev，拉取最新dev,选择pc-qxn节点右击选择“和分支合并”选择pc-qxn，合并本地pc-qxn，然后推送远端dev。
改二期，登本地dev，拉远端dev，推远端dev。
-------------------------------------------------------------------------------------------------
git快捷入手（核心）
一、安装对应操作系统git
 一、下载
  官网下载
 二、升级
  $ git clone git://git.kernel.org/pub/scm/git/git.git
二、设置用户名和email
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
三、本地仓库与github仓库的关联
 一、使电脑和github建立传输协议
  一、https
   https每次都要输入账户、密码，不方便。
  二、ssh（对电脑）
   本地电脑运行
   $ ssh-keygen -t rsa -C "email@example.com"
   C:\Users\Administrator\.ssh上会生成id_rsa私钥和id_rsa.pub公钥文件
   把id_rsa.pub公钥复制入github-settings-ssh and gpg keys里
  三、gpg（对人的）
四、建立本地git仓库
 一、直接在本地先建git仓库
  一、创建项目文件夹
   $ mkdir myProject
   $ cd myProject
   $ pwd用于显示当前目录，尽量防止出现中文
  二、git init初始化
 二、从github上拉取仓库
  在计算机对应目录
  $ git clone git@github.com:name/myProject.git
五、编辑本地仓库
六、编辑完，准备提交（重点，可能需要界面操作）
 一、add到暂存区
  $ git add .添加所有文件
 0、编写.ignore文件
 二、从暂存区commit提交到本地仓库
  $ git commit -m 'xxx'
 三、从远端仓库pull代码
 四、push到远端仓库
七、提交完结束工作
-------------------------------------------------------------------------------------------------
git基本操作（手册）
使用 Git 来获取 Git 的升级
$ git clone git://git.kernel.org/pub/scm/git/git.git
设置你的用户名称与邮件地址
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
配置默认文本编辑器 如 Emacs
$ git config --global core.editor emacs
检查配置信息
$ git config --list 命令来列出所有 Git 当时能找到的配置
获取帮助 打开本地git帮助文档
如，要想获得 config 命令的手册
三种：
$ git help config
$ git config --help
$ man git-config（未成功）

取得 Git 项目仓库
一、第一种是在本地现有项目或目录下导入所有文件到 Git 并传入github远端仓库。
先在git上建立远程仓库，注意不选Initialize this repository选项
在本地计算机上运行$ ssh-keygen -t rsa -C "qianno.1@qq.com"
在C:\Users\Administrator\.ssh上会生成id_rsa私钥和id_rsa.pub公钥文件
把id_rsa.pub公钥文件放入github-settings-ssh and gpg keys-添加新的标题和key就行了。另（ssh是对电脑的，gpg是对人的。）
在本地项目设置远端的仓库地址 $ git remote add origin git@github.com:qianxiaoning/test3.git
修改$ git remote set-url origin git@github.com:qianxiaoning/test3.git
推到远端$ git push -u origin master
二、第二种是从git服务器克隆一个现有的 Git 仓库到本地。
$ git clone https://github.com/libgit2/libgit2
自定义本地仓库的名字
$ git clone https://github.com/libgit2/libgit2 myName
推到远端$ git push

$ git init
跟踪文件
通过 git add 命令来实现对指定文件的跟踪，然后执行 git commit 提交
git add 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件
$ git add .//添加所有文件
$ git add *.c
$ git add LICENSE
添加备注
$ git commit -m 'initial project version'
$ git add添加内容到下一次提交中，新建的文件，或者修改的文件
$ git commit提交到本地暂存。
检查当前文件状态
$ git status
git status -s 命令或 git status --short 命令
$ git status -s
 M README  M 有两个可以出现的位置 出现在右边的 M 表示该文件被修改了但是还没放入暂存区
MM Rakefile  在工作区被修改并提交到暂存区后又在工作区中被修改了，所以在暂存区和工作区都有该文件被修改了的记录。
M  lib/simplegit.rb 出现在靠左边的 M 表示该文件被修改了并放入了暂存区
A  lib/git.rb  新添加到暂存区中的文件
?? LICENSE.txt    新添加的未跟踪文件
创建一个名为 .gitignore 的文件，列出要忽略的文件模式
$ cat .gitignore

*.[oa] 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的
*~ 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本

.gitignore用glob 模式
星号（*）匹配零个或多个任意字符；
[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；
问号（?）只匹配一个任意字符；
如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。
使用两个星号（*) 表示匹配任意中间目录，比如`a/**/z` 可以匹配 a/z, a/b/z 或 `a/b/c/z`等。

查看具体修改了什么地方
$ git diff
查看已暂存的将要添加到下次提交里的内容
git diff --staged
提交更新 至本地暂存
$ git commit
编辑完，按esc，英文:，wq保存并退出
git add类似添加按钮，git commit类似提交按钮
$ git commit -m 直接添加备注，不打开vim编辑器
$ git commit -m "Story 182: Fix benchmarks for speed"
跳过使用暂存区域
$ git commit -a
会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤
移除文件
从 Git 中移除某个文件，从暂存区域移除
$ rm p 物理删除
$ git rm p移除
如果删除之前修改过并且已经放到暂存区域
必须$ git rm -f p 强制删除
从暂存区移除入放弃跟踪（物理保留）
$ git rm --cached p
移动文件（即重命名）
$ git mv a aa 相当于
$ mv README.md README 物理改名
$ git rm README.md 从暂存区删除
$ git add README 添加入暂存区
查看提交历史
$ git log
提交的内容差异 最近两次
$ git log -p -2
等等
撤消操作
重新提交
$ git commit --amend
忘记了暂存某些需要的修改
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
取消暂存的文件
$ git reset HEAD CONTRIBUTING.md
撤消对文件的修改
$ git checkout -- CONTRIBUTING.md
远程仓库
$ git remote //origin - 这是 Git 给你克隆的仓库服务器的默认名字
显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL
$ git remote -v
添加远程仓库
git remote add <shortname> <url>
$ git remote add pb https://github.com/paulboone/ticgit
从远程仓库中抓取与拉取
$ git fetch [remote-name]
执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。
fetch相当于先pull再push
推送到远程仓库
git push [remote-name] [branch-name]
$ git push origin master
查看远程仓库
git remote show [remote-name]
远程仓库的重命名
$ git remote rename pb paul
远程仓库的移除
$ git remote rm paul
打标签
列出标签
$ git tag
创建标签
附注标签
$ git tag -a v1.4
-m添加备注
$ git tag -a v1.4 -m 'my version 1.4'
git show 命令可以看到标签信息与对应的提交信息
$ git show v1.4
轻量标签
$ git tag v1.4-lw
$ git show v1.4-lw
共享标签 到远端
git push origin [tagname]
或$ git push origin --tags推所有标签
检出标签
git checkout -b [branchname] [tagname]
$ git checkout -b version2 v2.0.0
Git 别名
$ git config --global alias.ci commit
当要输入 git commit 时，只需要输入 git ci
想要执行外部命令，而不是一个 Git 子命令。 如果是那样的话，可以在命令前面加入 ! 符号。
$ git config --global alias.visual '!gitk'
分支创建
$ git branch dev
查看各个分支当前所指的对象
$ git log --oneline --decorate
分支切换
$ git checkout dev
分支的新建与合并
新建一个分支并同时切换到那个分支上
$ git checkout -b iss53
$ git branch iss53
$ git checkout iss53
切换到dev分支
$ git checkout dev
将hotfix分支合并回你的 dev 分支（不影响hotfix分支，只改变dev分支）
$ git merge hotfix
删除分支
$ git branch -d hotfix
强制删除分支
$ git branch -D hotfix
遇到冲突时的分支合并
$ git merge dev
Auto-merging b
CONFLICT (content): Merge conflict in b
Automatic merge failed; fix conflicts and then commit the result.
使用 git status 命令来查看冲突未合并（unmerged）状态的文件
Unmerged paths://未合并文件路径
  (use "git add <file>..." to mark resolution)

        both modified:   b//相同的修改，位于b文件
//下面是b文件
bbb
<<<<<<< HEAD //head为当前分支
aa
ee
======= //冲突间隔
qq
ee
>>>>>>> dev //dev分支
手动编辑合并
使用图形化工具来解决冲突
$ git mergetool比如vimdiff
分支管理
得到当前所有分支的一个列表
$ git branch
查看每一个分支的最后一次提交
$ git branch -v
获得远程引用的完整列表
git ls-remote (remote)//origin
16ed15f3b69b30cb5eef76e8a212824ece8e41e1        HEAD
16ed15f3b69b30cb5eef76e8a212824ece8e41e1        refs/heads/master
获得远程分支的更多信息
git remote show (remote)
* remote origin
  Fetch URL: git@github.com:qianxiaoning/testProject.git
  Push  URL: git@github.com:qianxiaoning/testProject.git
  HEAD branch: master
  Remote branch:
    master tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
推送
git push (remote) (branch)
$ git push origin serverfix
如果你正在使用 HTTPS URL 来推送
不想在每一次推送时都输入用户名与密码，可以设置一个 “credential cache”。
最简单的方式就是将其保存在内存中几分钟，可以简单地运行 git config --global credential.helper cache 来设置它。
想要修改正在跟踪的上游分支
使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置
$ git branch -u origin/serverfix
查看设置的所有跟踪分支
$ git branch -vv
拉取
git pull
删除远程分支
$ git push origin --delete serverfix
变基
rebase
将提交到某一分支上的所有修改都移至另一分支上
$ git rebase master
变基等
用变基解决变基
服务器上的 Git - 协议
等等
-------------------------------------------------------------------------------------------------
