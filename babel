babel只是将一些es6，es7-8的语法转换成符合目标的js代码

babel不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。这时就需要babel-polyfill // 会添加相应变量到全局，会污染全局变量

@babel/polyfill和transform-runtime

1.transform-runtime：
开发作为第三方工具或库时可以引入transform-runtime
transform-runtime 与polyfill有些类似，但它不污染全局变量，所以经常用于框架开发
但是transform-runtime不能转化新的API的实例方法，如"foobar".includes("foo")
npm i babel-plugin-transform-runtime
在babel.config.js中：
const plugins = ['@babel/plugin-transform-runtime'];  

2.@babel/polyfill
开发自身产品时：
@babel/polyfill可以转化所有js新的API，不过@babel/polyfill比较大
npm install -S @babel/polyfill
在babel.config.js中：
{
  "presets": [
    [
      "@babel/preset-env",
      {
        // 根据环境支持度，加载所需部分@babel/polyfill
        "useBuiltIns": "usage"
      }
    ]
  ]
}

babel配置文件 三种方式
1.babel.config.js
module.exports = function (api) {
  api.cache(true);

  const presets = [ ... ];
  const plugins = [ ... ];

  return {
    presets,
    plugins
  };
}
2..babelrc
{
  "presets": [...],
  "plugins": [...]
}
3.package.json
{
  "name": "my-package",
  "version": "1.0.0",
  "babel": {
    "presets": [ ... ],
    "plugins": [ ... ],
  }
}

webpack中用babel
1.npm install -D babel-loader @babel/core @babel/preset-env
2.在webpack.config.js中添加babel-loader
module: {
    rules: [
        {
            test: /\.js$/,
            exclude: /node_modules/,
            use: {
                loader: 'babel-loader',
                options: {
                    presets: ['@babel/preset-env']
                }
            }
        }
    ]
}
3.安装@babel/polyfill
npm install -S @babel/polyfill
在babel.config.js中：
{
  "presets": [
    [
      "@babel/preset-env",
      {
        // 根据环境支持度，加载所需部分@babel/polyfill
        "useBuiltIns": "usage"
      }
    ]
  ]
}