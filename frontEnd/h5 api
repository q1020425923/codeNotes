window.localStorage.setItem('a',[1,2,3]);
 window.localStorage.getItem('a');得到字符串'1,2,3'
 window.localStorage存取对象
 window.localStorage.setItem('a',JSON.stringify({a:1}));
JSON.parse(window.localStorage.getItem('a'));
清除某项Storage
localStorage.removeItem('myCat');
清楚所有Storage
localStorage.clear();

localStorage可以直接点出来？localStorage.xxx来存取
--------------------------------------------------------------------------------------------------
不同浏览器的localstorage和cookie都是不同的，独立的。 
不同域名的localstorage和cookie也是不共通的。
--------------------------------------------------------------------------------------------------
不刷新修改网页url地址栏
window.history.pushState(state, title, url);//将当前URL和history.state加入到history中，并用新的state和URL替换当前。不会造成页面刷新。
window.history.replaceState(state, title, url);//用新的state和URL替换当前。不会造成页面刷新。
//两个方法的主要区别：pushState()是在history栈中添加一个新的条目，replaceState()是替换当前的记录值。
//当浏览器触发返回和前进history.go和history.back时，由于使用pushState修改了history，会触发popstate事件，获取state方法：
window.onpopstate = function(e) { 
    console.log(e.state); 
};
//pushState()方法不会导致hashchange事件被激活
//源域名不能改，后面的参数可以改
示例：window.history.replaceState({},null,'https://www.baidu.com/s');
--------------------------------------------------------------------------------------------------
h5 datalist标签
<input list="cars" />
<datalist id="cars">
	<option value="BMW">
	<option value="Ford">
	<option value="Volvo">
</datalist>
datalist标签不仅可以供用户选择，用户还可以自己输入，而且datalist还可以达到模糊匹配的效果，使用很方便。

历史栈
push加入一个记录
replace也是加入一个记录，但是会删除当前记录
history.back()返回页面，会读取之前的缓存，变量值都在，生命周期也都执行

vue中router.go(-1)返回页面，没有缓存，生命周期执行

页面回退是不能传回任何参数的

h5经典结构：
header
nav
article               aside
	section
fotter